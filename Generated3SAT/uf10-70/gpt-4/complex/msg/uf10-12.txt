Solving SAT problem mainly relies on DPLL (Davis-Putnam-Logemann-Loveland) algorithm which is also known as resolution by contradiction, and it's the most common SAT-solving algorithm used. Below are the steps to solve this:

1. First, initialize a Bool array (val) of length 10 (as there are 10 variables). The ith index of this array stores the Bool value (True or False) of the ith variable. Initially all are unassigned or null.
2. Check the first clause which is 5 -8 2. The clause means the variables (abs(5), abs(-8), abs(2)) are related by OR operator, and if a variable is negative, then its value is negated. As per the rule of DPLL, keep putting values into val array by following the principles: unit propagation, pure literal elimination or splitting. Here in this case, assign val[5] = True, val[8] = False, val[2] = True (we can choose whatever we want as nothing is connected yet).
3. Go to the second clause which is 1 -5 3, which translates to val[1] OR (NOT val[5]) OR val[3]. It implies val[1] = True, val[5] should not be True, val[3] = True. Since val[5] is already True, this is a conflict. So, we backtrack, i.e., change previous choice of val[5] to False.
4. Now, the second clause does not get any conflict. We go to third clause similarly and follow the steps.
5. During this process, the algorithm can take advantage of several strategies (such as unit propagation, pure literal deletion, and splitting) to reduce the problem size and avoid unnecessary backtracking.
6. Once we get through all the clauses, we iterate again from first to last clause, and check if they're all satisfied. If not satisfied, then we backtrack and assign different values again.

When applying a SAT solver (such as MiniSat or CryptoMiniSat) to this DIMACS CNF problem, it performs all these steps and iteration in high speed and returned the solved values for each variable. 

Answer:
After applying a SAT solver (like Z3, MiniSat or CryptoMiniSat), we would get the solution for given SAT Problem, the result could look something like this:
answer: 
1 -2 -3 -4 -5 -6 -7 -8 -9 10