To solve this problem, we can use a SAT solver to find a satisfying assignment for the given CNF formula. Let's write a Python script using the `pycosat` library to solve this problem:

```python
import pycosat

# Given CNF formula
cnf = [[-10, 4, -9], [4, 8, -3], [-2, -1, -9], [7, 4, 6], [8, 1, 5], [6, -3, -9], [8, 7, 5], [2, -3, 7], [4, 8, 7], [-3, -2, 6],
       [4, -10, -2], [-3, -1, -10], [-1, 6, -3], [-4, -9, -2], [10, -1, -3], [5, -3, -6], [5, 1, -10], [6, -3, -1], [10, -7, 8],
       [4, 7, -10], [4, -2, -3], [-3, -10, 5], [6, 7, 4], [-1, -10, 7], [5, 4, -1], [10, -9, -3], [7, -1, -9], [-9, 8, -2],
       [-2, -3, 9], [-8, -1, -2], [6, -2, -10], [6, 7, -10], [-2, -9, 4], [8, 5, 6], [-2, 5, -1], [6, 7, 8], [-1, -2, 4],
       [-8, 4, -3], [-3, -2, -6], [-10, -1, -9], [6, 5, 4], [5, 6, -8], [-6, -2, 5], [4, -5, 7], [-9, 4, 7]]

# Convert CNF into DIMACS format
DIMACS = []
DIMACS.append(f'p cnf 10 {len(cnf)}')
for clause in cnf:
    DIMACS.append(' '.join(map(str, clause + [0])))

# Solve using pycosat
solution = pycosat.solve(DIMACS)

# Print the solution
print(solution)
```

Running this script will output the satisfying assignment if one exists. If the SAT solver does not return a solution, it means that there is no satisfying assignment for the given CNF formula.

Now, let's write our final answer as a solution:

answer: SATISFIABLE