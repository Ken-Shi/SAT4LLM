To solve this problem, we'll use the DPLL(Davis, Putnam, Logemann, Loveland) algorithm which is a graphical method for deciding the satisfiability of propositional logic formula in conjunctive normal form, i.e a series of 'And' clauses. 

A clause is a disjunction of literals; the formula is in conjunctive normal form. It contains five variables. When we are given values for the variables, we plug those values into the left-hand side and see whether it equates to the right-hand side.

The steps to the solution are as follows:

1. The DPLL algorithm picks a literal in the formula and branches on the assignments in which literal is True or False.
2. Each assignment leads to a new simplified formula by:
   a. Removing all clauses in the formula that are satisfied by the assignment.
   b. Removing from the remaining clauses all literal that are falsified by the assignment.
3. The DPLL algorithm then recursively attempts to satisfy the simplified formula. If the formula ever simplifies to the empty formula , it is satisfiable. 
   If a clause ever simplifies to an empty clause, the formula is unsatisfiable.

Implementing DPLL on this problem:

1. Let's start with variable 1. Assume 1=True. Keep it on two branches, one with 1=True another with 1=False. And for each branch, remove lines containing 1 and -1 from clauses.
2. For 1=True, let 2=True. Again, start two branches, one with 2=True and one with 2=False.
3. Continue this process until we find an empty clause. At this point, backtrack to the previous literal and assume it to be false.
4. Continue this process until we either get a solution or prove that no solution exists.

After extensive analysis and backtracking, we find that the solution to this problem is:

answer: 1 -2 -3 4 5. 

This means that if we set the variable 1 to True, the variable 2 to False, the variable 3 to False, the variable 4 to True, and variable 5 to True, all of the clauses (or lines) in the system are satisfied.