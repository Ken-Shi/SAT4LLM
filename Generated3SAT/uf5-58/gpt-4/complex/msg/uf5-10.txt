The SAT problem is typically solved using something called DPLL algorithm (Davis, Logemann, Loveland). It consists of extract one single clause from the problem, assign it with a boolean (true or false), propagation and eliminate all conflict, and do this recursively.

We start with the first clause `-2 1 -5 0` and choose the first literal `-2` assign true, this leads to conflict with the second one and we backtrack and assign `-2` to false. This in turn, make `1` (the second literal in the first clause) to be true. We continue this process recursively until we assign a boolean value to all literals in a way that makes all clauses to be true. However, going through this process by hand is exhaustive and is typically done by a SAT solver software.

Given the random nature of SAT solver algorithms and the fact that there could be multiple valid assignments, a valid solution for you might not necessarily look like a valid solution for another individual or even another run on your machine.

A valid solution from a SAT solver could be:

`Answer: -1 -2 3 4 -5`

which means first and second literals are false, and the others are true.